// newButton(f1,b1,press me,x,y,width,height)
// newText(f1,t1,the text,x,y)
// newTextField(f1,tf1,the text,x,y,width,height,true)
// newTextField(f1,tf1,x,y,width,height,true)
// newComboBox(f1,cb1,x,y,width,height)
// newList(f1,l1,x,y,width,height)
// newCheckBox(f1,cb1,10,10,true)
// newTree(f1,t1,10,10,100,100)
// t1.addNode(t1,n1,text)

/***** OBJECT ********/

1469.newForm(f1,<Operation Root::Test.test>)
1469.newText(f1,t1,self,15,5)
1469.newText(f1,t2,of,15,25)
1469.newText(f1,t3,isAbstract,15,45)
1469.newText(f1,t4,grammar,15,65)
1469.newText(f1,t5,default,15,85)
1469.newText(f1,t6,name,15,105)
1469.newText(f1,t7,owner,15,125)
1469.newText(f1,t8,documentation,15,145)
1469.newTextField(f1,tf1,90,5,120,12,false)
1469.newTextField(f1,tf2,90,25,120,12,false)
1469.newCheckBox(f1,cb1,90,45,true)
1469.newTextField(f1,tf3,90,65,120,12,false)
1469.newTextField(f1,tf4,90,85,120,12,false)
1469.newTextField(f1,tf5,90,105,120,12,true)
1469.newTextField(f1,tf6,90,125,120,12,false)
1469.newTextField(f1,tf7,90,145,120,12,true)
1469.newText(f1,t9,attributes,220,5)
1469.newList(f1,l1,280,5,100,70)
1469.newText(f1,t10,operations,220,85)
1469.newList(f1,l2,280,85,100,70)
1469.newText(f1,t11,parents,400,5)
1469.newList(f1,l3,460,5,100,70)
1469.newText(f1,t12,constraints,400,85)
1469.newList(f1,l4,460,85,100,70)
1469.addMenuItem(l1,menu1,add)
1469.addMenuItem(l1,menu2,delete)
1469.addMenuItem(l2,menu3,add)
1469.addMenuItem(l2,menu4,delete)
1469.addMenuItem(l3,menu5,add)
1469.addMenuItem(l3,menu6,delete)
1469.setText(tf1,<Class Root::Test>)
1469.setText(tf2,<Class Root::XCore::Class>)
1469.setText(tf3,<null>)
1469.setText(tf4,<null>)
1469.setText(tf5,Bob)
1469.setText(tf6,<Root>)
1469.setText(tf7,Test documentation)
1469.addItem(l1,x1,x)
1469.addItem(l1,y1,y)
1469.addItem(l1,w1,width)
1469.addItem(l1,h1,height)
1469.addItem(l2,sx,setX)
1469.addItem(l2,sy,setY)
1469.addItem(l2,w,setWidth)
1469.addItem(l2,h,setHeight)
1469.addItem(l2,gx,getX)
1469.addItem(l2,gy,getY)
1469.addItem(l2,gw,getWidth)
1469.addItem(l2,gh,getHeight)
1469.addItem(l3,obj,<Class Root::XCore::Object>)

/***** OPERATION ********/

1469.newForm(f2,<Class Root::Test>)
1469.newText(f2,ft1,self,15,5)
1469.newText(f2,ft2,of,15,25)
1469.newText(f2,ft3,peformable,15,45)
1469.newText(f2,ft4,type,15,65)
1469.newText(f2,ft5,name,15,85)
1469.newText(f2,ft6,owner,15,105)
1469.newText(f2,ft7,documentation,15,125)
1469.newTextField(f2,ftf1,90,5,120,12,false)
1469.newTextField(f2,ftf2,90,25,120,12,false)
1469.newTextField(f2,ftf3,90,45,120,12,false)
1469.newTextField(f2,ftf4,90,65,120,12,false)
1469.newTextField(f2,ftf5,90,85,120,12,true)
1469.newTextField(f2,ftf6,90,105,120,12,false)
1469.newTextField(f2,ftf7,90,125,120,12,true)
1469.newText(f2,ft9,env,220,5)
1469.newList(f2,fl3,280,5,100,70)
1469.newText(f2,ft10,parameters,220,85)
1469.newList(f2,fl4,280,85,100,70)
1469.addMenuItem(fl3,menu5,add)
1469.addMenuItem(fl3,menu6,delete)
1469.addMenuItem(menu6,menu7,selected item)
1469.addMenuItem(menu6,menu8,all items)
1469.addMenuItem(fl4,menu7,add)
1469.addMenuItem(fl4,menu8,delete)
1469.setText(ftf1,<Class Root::Test::test>)
1469.setText(ftf2,<Class Root::XCore::Operation>)
1469.setText(ftf3,<a Send Seq{set}>)
1469.setText(ftf4,<PathRef>)
1469.setText(ftf5,desugar)
1469.setText(ftf6,<Class Root::Test>)
1469.setText(ftf7,A test operation)
1469.addItem(fl3,Seq{null | <null>})
1469.newButton(f2,b1,Execute,400,120,100,30)

/* CONSTRAINT CHECKING */

1469.newForm(f3,Constraint check for <Snapshot Root::Snapshot1>)
1469.newTree(f3,t1,10,10,350,150,true)
1469.addNode(t1,n1,Classification failed for <Snapshot Root::Snapshot1>,classify/error.gif)
1469.addNode(n1,n2,Type check succeeded against <Package Root::Bank>,classify/okay.gif)
1469.addNode(n1,n3,Classification failed for <a Bank>,classify/error.gif)
1469.addNode(n3,n4,Type check succeeded against <Class Root::Bank::Bank>,classify/okay.gif)
1469.addNode(n3,n5,Constraint check succeeded for <Constraint Root::Bank::Bank::NoDuplicateAccounts,classify/okay.gif)
1469.addNode(n3,n6,Constraint check failed for <Constraint Root::Bank::Bank::BankAccountBelongToBankCustomers,classify/error.gif)
1469.addNode(n3,n7,Constraint check succeeded for <Constraint Root::XCore::Object::HasAllSlots>,classify/okay.gif)
1469.addNode(n3,n8,Constraint check succeeded for <Constraint Root::XCore::Object::AllSlotsTypeCorrect>,classify/okay.gif)
1469.newButton(f3,b1,Check Again,380,10,100,30)
1469.addMenuItem(n1,menu9,menu one)
1469.addMenuItem(n1,menu10,menu two)
1469.addMenuItem(n1,menu11,menu three)
1469.addMenuItem(n2,menu12,menu four)
1469.addMenuItem(n2,menu13,menu five)
1469.addMenuItem(menu9,menu14,menu six)
1469.addMenuItem(menu9,menu15,menu seven)
1469.addMenuItem(menu14,menu16,menu eight)
1469.addMenuItem(menu14,menu17,menu nine)

/* CODE VIEWER */

1469.newForm(f4,<Operation Root::Test.test>)
1469.newTextBox(f4,tb1,10,10,500,150,true)
1469.newButton(f4,b2,Commit,530,10,100,30)
1469.addRule(tb1,@Operation,red)
1469.addRule(tb1,if,red)
1469.addRule(tb1,then,red)
1469.addRule(tb1,else,red)
1469.addRule(tb1,end,red)
1469.addRule(tb1,send,blue)
1469.addRule(tb1,sends,green)
1469.addRule(tb1,self,red)
1469.addRule(tb1,exists,red)
1469.addRule(tb1,select,red)
1469.addRule(tb1,throw,red)
1469.setText(tb1,@Operation get(name:String):String if attributes->exists(a | a.name = name) then attributes->select(a | a.name = name)->self.value else throw NoAttribute(self name) end end)
